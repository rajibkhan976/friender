@use './color';
@use './font';
@use './variables';

@mixin bordered($color, $width, $type) {
  border: $width $type $color;
}

@mixin positioned($type) {
  position: $type;
}

@mixin margins ($marginTop, $marginRight, $marginBottom, $marginLeft) {
  margin-top: $marginTop;
  margin-right: $marginRight;
  margin-bottom: $marginBottom;
  margin-left: $marginLeft;
}

@mixin paddings ($paddingTop, $paddingRight, $paddingBottom, $paddingLeft) {
  padding-top: $paddingTop;
  padding-right: $paddingRight;
  padding-bottom: $paddingBottom;
  padding-left: $paddingLeft;
}

@mixin border-radius($top-left: 10px, $top-right: null, $bottom-right: null, $bottom-left: null) {
  -webkit-border-radius: $top-left $top-right $bottom-right $bottom-left;
  -moz-border-radius: $top-left $top-right $bottom-right $bottom-left;
  -ms-border-radius: $top-left $top-right $bottom-right $bottom-left;
  border-radius: $top-left $top-right $bottom-right $bottom-left;
}

// Margin auto

@mixin center--auto {
  margin: {
    left: auto;
    right: auto;
  }
}

// Text Ellipse

@mixin ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}

// Text alignment
@mixin textAlignment($textAlignment) {
  text-align: $textAlignment;
}
// Text alignment


// Text alignment
@mixin display($displayProperty) {
  display: $displayProperty;
}
// Text alignment


// Position alignment
@mixin textAlign($alignment: variables.$left-alignment) {
  text-align: $alignment;
}

// Avater Styling
@mixin circleAvater($size, $radius: 0) {
  width: $size;
  height: $size;

  @if $radius != 0 {
    border-radius: $radius;
  }
}
// Avater Styling


// Flex 

@mixin flexCenter{
  display: flex;
  justify-content: center; 
  align-items: center; 
 }
 
 @mixin flexDirection($direction){
  display: flex;
  justify-content: center; 
  align-items: center; 
  flex-direction: $direction
 }
// Flex


// ClearFix
@mixin clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}
// ClearFix



// Gradient
@mixin background-gradient($start-color, $end-color, $orientation) { 
  background: $start-color;

  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// Gradient


// Another Gradient

@mixin gradient($direction, $list) { 
  background: -webkit-linear-gradient($direction, $list);
  background: -moz-linear-gradient($direction, $list);
  background: -o-linear-gradient($direction, $list);
  background: linear-gradient($direction, $list);  
}

// Another Gradient






// triangle mixin
@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  $width: nth($size, 1);
  $height: nth($size, length($size));

  $foreground-color: nth($color, 1);
  $background-color: if(length($color)==2, nth($color, 2), transparent);

  @if ($direction==up) or ($direction==down) or ($direction==right) or ($direction==left) {

    $width: $width / 2;
    $height: if(length($size) > 1, $height, $height/2);

    @if $direction==up {
      border-bottom: $height solid $foreground-color;
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;

    }

    @else if $direction==right {
      border-bottom: $width solid $background-color;
      border-left: $height solid $foreground-color;
      border-top: $width solid $background-color;

    }

    @else if $direction==down {
      border-left: $width solid $background-color;
      border-right: $width solid $background-color;
      border-top: $height solid $foreground-color;

    }

    @else if $direction==left {
      border-bottom: $width solid $background-color;
      border-right: $height solid $foreground-color;
      border-top: $width solid $background-color;
    }
  }

  @else if ($direction==up-right) or ($direction==up-left) {
    border-top: $height solid $foreground-color;

    @if $direction==up-right {
      border-left: $width solid $background-color;

    }

    @else if $direction==up-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction==down-right) or ($direction==down-left) {
    border-bottom: $height solid $foreground-color;

    @if $direction==down-right {
      border-left: $width solid $background-color;

    }

    @else if $direction==down-left {
      border-right: $width solid $background-color;
    }
  }

  @else if ($direction==inset-up) {
    border-color: $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction==inset-down) {
    border-color: $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $height $width;
  }

  @else if ($direction==inset-right) {
    border-color: $background-color $background-color $background-color $foreground-color;
    border-style: solid;
    border-width: $width $height;
  }

  @else if ($direction==inset-left) {
    border-color: $background-color $foreground-color $background-color $background-color;
    border-style: solid;
    border-width: $width $height;
  }
}

// Usage: 
// .arrow-up {
//     @include triangle(32px, $yellow, up);
// }
// triangle mixin //

// Placing Center

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

  } @else if ($horizontal) {
    left: 50%;
    transform: translate(-50%, 0);

  } @else if ($vertical) {
    top: 50%;
    transform: translate(0, -50%);
  }
}


// Usage in code
// .parent {
//   position: relative;
// }

// .child {
//   background: white;
//   padding: 20px;

//   &.both {
//     @include center;
//   }

//   &.horizontal {
//     @include center(true, false);
//   }

//   &.vertical {
//     @include center(false, true);
//   }
// }

// Placing Center




// Placeholder

@mixin input-placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}



// Transition

@mixin transition($transition) {
  -moz-transition: $transition;
  -o-transition: $transition;
  -webkit-transition: $transition;
  transition: $transition;
}

@mixin transition-property($property) {
  -moz-transition-property: $property;
  -o-transition-property: $property;
  -webkit-transition-property: $property;
  transition-property: $property;
}

@mixin transition-duration($duration) {
  -moz-transition-property: $duration;
  -o-transition-property: $duration;
  -webkit-transition-property: $duration;
  transition-property: $duration;
}

@mixin transition-timing-function($timing) {
  -moz-transition-timing-function: $timing;
  -o-transition-timing-function: $timing;
  -webkit-transition-timing-function: $timing;
  transition-timing-function: $timing;
}

@mixin transition-delay($delay) {
  -moz-transition-delay: $delay;
  -o-transition-delay: $delay;
  -webkit-transition-delay: $delay;
  transition-delay: $delay;
}

// Transition



// Header Text Styling

@mixin hedadingText( $size: font.$fontSize, $color: color.$textHeadingColor, $weight: font.$headingFontWeight) {
  // Standard Auth Page Heading Styles
  font-size: $size;
  font-weight: $weight;
  color: $color;
  line-height: 21.82px;
  @include margins (0px , 0, 20px, 0);
}
@mixin hedadingPara( $size: font.$smallFontSize, $color: color.$textParaColor, $height: variables.$lineHeight) {
  font-size: $size;
  color: $color;
  line-height: $height;
}

// Header Text Styling


// Button

@mixin authButton( $button-type: '', $width: variables.$full-width, $weight: font.$smallFontWeight) {
  // Standard Auth Button Styles
  width: $width;
  background: color.$buttonBackground;
  font-size: font.$fontSize;
  font-weight: $weight;
  color: color.$buttonTextColor;
  @include border-radius(5px);
  @include margins (10px , 0, 30px, 0);
  @include paddings (14px , 0, 14px, 0);
  @include transition(.3s ease-in-out);
  @include textAlignment(center);
  cursor: pointer;
  &:hover {
    background: color.$buttonHoverBackground;
  }
}

// Button



// Input Fields

@mixin inputBox( $background: color.$inputBackground, $width: variables.$full-width, $color: color.$textColor ) {
  // Standard Auth InputBox Styles
    width: $width;
    @include paddings(12px,32px,12px,20px);
    color: $color;
    font-size: 14px;
    font-weight: 400;
    position: relative;
    background: $background;
    transition: all .5s ease-in-out;
    @include border-radius(5px);
    @include bordered(color.$inputBackground, 1px, solid);
  &:active, &:focus, &:focus-within, &:hover, &:visited, &:focus-visible, &:target  {
    @include bordered(color.$inputBoxBorder, 1px, solid);
    background: #131314;
  }
}

// Input Fields



// Input Fields Error Message

@mixin errorMessage($color: color.$errorColor, $weight: font.$smallFontWeight) {
  color: $color;
  font-weight: $weight;
  font-size: 12px;
  transition: all .5s ease-in-out;
  @include positioned(relative);
  margin: 10px 0 0 0;
  display: block;
}

// Input Fields Error Message


// Auth Page Input Box

@mixin authBox( $background: color.$bodyColor, $width: variables.$authBox-width, $border: color.$borderBoxColor, $weight: font.$smallFontWeight) {
  width: $width;
  transform: translate(-50%, -50%);
  top: 50%;
  left: 50%;
  background: $background;
  border: 1px solid $border;
  @include border-radius(10px);
  @include positioned(relative);
  @include paddings (78px,100px,94px,100px);
  font-weight: $weight;
  z-index: 9;
}

// Auth Page Input Box


// Media Query Break Points
@mixin media-query($break-point) {
  @if $break-point==lg {
    @media (max-width: 1650px) {
      @content
    }
  }

  @if $break-point==md {
    @media (max-width: 1450px) {
      @content
    }
  }

  @if $break-point==sm {
    @media (max-width: 1024px) {
      @content
    }
  }

  @if $break-point==xs {
    @media (max-width: 991px) {
      @content
    }
  }

}